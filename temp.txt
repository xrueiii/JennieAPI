src/
├── extension.ts               # 🔌 入口點，負責啟用插件、註冊命令與事件
├── commands/
│   ├── generateApiJson.ts     # 📦 掃描資料夾產生 api.json 的邏輯
│   ├── suggestApiEndpoint.ts  # 💡 建議 API endpoint 並插入 fetch code
│   └── testCommand.ts         # 🧪 測試用命令
├── core/
│   ├── openai.ts              # 🧠 封裝呼叫 Azure OpenAI 的邏輯
│   ├── apiDocs.ts             # 📚 讀取與解析 api.json 的邏輯
│   └── apiUtils.ts            # 🔎 關鍵字萃取、相似度計算、API 分析等
├── ui/
│   └── webview.ts             # 🖼️ WebView 面板 HTML 的載入與處理
├── codegen/
│   ├── fetchSnippet.ts        # 🧩 根據 API 文件產生 fetch snippet
│   └── refineCode.ts          # 🔧 呼叫 LLM 優化生成的 code snippet
├── types/
│   └── index.ts               # 🧾 Message, ApiDoc, ApiEndpoint 等型別定義
├── utils/
│   └── file.ts                # 📂 讀檔、路徑拼接、遞迴搜尋等等工具
media/
icon/
package.json
tsconfig.json
.vscodeignore



async function generateResponse(prompt: string): Promise<string> {
  if (!url || !apiKey) {
    vscode.window.showErrorMessage("❌ Missing AZURE_OPENAI_FULL_URL or AZURE_OPENAI_API_KEY in .env");
    return "Environment variables missing.";
  }

  const headers = {
    "Content-Type": "application/json",
    "api-key": apiKey
  };

  const messages: Message[] = [
    { role: "system", content: "You are a helpful assistant." },
    { role: "user", content: prompt }
  ];

  const requestBody = {
    messages,
    max_tokens: 5000,
    temperature: 1,
    top_p: 1
  };

  try {
    const response = await fetch(url, {
      method: "POST",
      headers,
      body: JSON.stringify(requestBody)
    });

    const data = (await response.json()) as any;

    if (!response.ok) {
      vscode.window.showErrorMessage(`⚠️ Azure API Error: ${data.error?.message || 'Unknown error'}`);
      return "API error.";
    }

    const content = data.choices?.[0]?.message?.content;
    return content || "⚠️ No message content.";
  } catch (err: any) {
    console.error("❌ Azure call failed:", err);
    vscode.window.showErrorMessage("❌ Error calling Azure API: " + err.message);
    return "❌ API call failed.";
  }
}